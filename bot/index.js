const TelegramBot = require("node-telegram-bot-api")
require("dotenv").config()
const validator = require("email-validator")
const db = require("../services/db.services")
const messages = require("./messages")
const { User } = require("../db")
const { findSub } = require("../controllers/controllers")

const TOKEN = process.env.TOKEN
const BASE_URL = process.env.BASE_URL

const bot = new TelegramBot(TOKEN, {
  polling: {
    interval: 100,
    autoStart: true,
    params: {
      timeout: 10,
    },
  },
})

const startMessage = async (msg) => {
  await bot.sendMessage(msg.chat.id, messages.startMes, {
    reply_markup: {
      keyboard: [["–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏üí∞"], ["–ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥"], ["–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞‚öôÔ∏è"]],
      resize_keyboard: true,
    },
  })
}

const getMoney = async (msg) => {
  bot.sendMessage(msg.chat.id, "üí∏–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:", {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: `üí∞500 —Ä—É–±–ª–µ–π`,
            callback_data: "500",
          },
        ],
        [
          {
            text: `üí∞1000 —Ä—É–±–ª–µ–π`,
            callback_data: "1000",
          },
        ],
        [
          {
            text: `üí∞1500 —Ä—É–±–ª–µ–π`,
            callback_data: "1500",
          },
        ],
      ],
    },
  })
}

const registration = async (msg) => {
  await bot.sendMessage(msg.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –ø–æ—á—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
  bot.on("message", async function getEmail(msg) {
    if (validator.validate(msg.text)) {
      bot.removeListener("message", getEmail)
      await db.createUser(msg.from.id, msg.text)
      getMoney(msg)
    } else {
      await bot.sendMessage(msg.chat.id, "–¢–∞–∫–æ–π –ø–æ—á—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!‚ùå")
      await bot.sendMessage(
        msg.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –ø–æ—á—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
      )
    }
  })
}

const botStart = () => {
  bot.onText(/\/start/, async (msg) => {
    startMessage(msg)
  })

  bot.on("callback_query", async (query) => {
    await db.addAmount(query.message.chat.id, +query.data)
    bot.sendMessage(
      query.message.chat.id,
      "üí≥–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã",
      {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: `üí∏–ü–æ–ª—É—á–∏—Ç—å ${query.data} —Ä—É–±–ª–µ–π`,
                url: `${BASE_URL}`,
              },
            ],
          ],
        },
      }
    )
  })

  bot.on("message", async (msg) => {
    const user = await User.findOne({ where: { userId: msg.chat.id } })
    switch (msg.text) {
      case "–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏üí∞":
        await bot.sendMessage(msg.chat.id, messages.rule)
        if (!user) {
          await registration(msg)
        } else {
          getMoney(msg)
        }
        break
      case "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞‚öôÔ∏è":
        await bot.sendMessage(msg.chat.id, messages.support)
        break
      case "–ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥":
        if (!user) {
          await registration(msg)
        } else {
          const sub = await findSub(user.accountId)
          if (!sub) {
            await bot.sendMessage(msg.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤‚úÖ")
          } else {
            console.log(sub)
          }
        }

        break
      default:
        await bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        break
    }
  })
}

module.exports = { botStart }
